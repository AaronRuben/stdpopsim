# Script used to update genome data from Ensembl.
# TODO: this should be moved into the maintenance package,
# ideally where we turn it into a CLI that we run with
# python -m maintenance update-ensembl-data. That way we
# can keep all the code for various scripts in one place,
# and we don't clutter up the top-level directory with
# scripts like this one.
import pathlib
import subprocess
import contextlib

import stdpopsim
import maintenance


class DataWriter:
    """
    Writes data obtained from upstream sources into the stdpopsim
    package hierarchy.
    """

    def __init__(self):
        self.ensembl_client = maintenance.EnsemblRestClient()

    @contextlib.contextmanager
    def write(self, path):
        with open(path, "w") as f:
            print("# File autogenerated from Ensembl REST API. Do not edit.", file=f)
            yield f
        # TODO we can remove this once we've moved to using pre-commit and
        # Black, as these will be autoformatted.
        subprocess.check_call(["black", "-q", path])

    def write_genome_data(self, species):
        print("Writing genome data for", species.id, species.ensembl_id)
        path = f"stdpopsim/catalog/{species.id}/genome_data.py"
        data = self.ensembl_client.get_genome_data(species.ensembl_id)
        with self.write(path) as f:
            print("data = ", data, file=f)

    def write_ensembl_release(self):
        release = self.ensembl_client.get_release()
        print(f"Using Ensembl release {release}")
        path = "stdpopsim/catalog/ensembl_info.py"
        with self.write(path) as f:
            print("release = ", release, file=f)


def main():
    writer = DataWriter()
    writer.write_ensembl_release()
    for species in stdpopsim.all_species():
        writer.write_genome_data(species)


if __name__ == "__main__":
    main()
