"""
Command line interface for managing routine maintenance tasks.

This interface is for stdpopsim developers only.
"""
import contextlib
import shutil
import string
import pathlib

import click
import black

import stdpopsim
from . import ensembl

species_template = string.Template(
    """
import stdpopsim

from . import genome_data

_chromosomes = []
for name, data in genome_data.data["chromosomes"].items():
    _chromosomes.append(
        stdpopsim.Chromosome(
            id=name,
            length=data["length"],
            synonyms=data["synonyms"],
            mutation_rate=0,  # FILL ME IN
            recombination_rate=0,  # FILL ME IN
        )
    )

_genome = stdpopsim.Genome(
    chromosomes=_chromosomes,
    mutation_rate_citations=[], # ADD CITATIONS
    recombination_rate_citations=[],  # ADD CITATIONS
    assembly_name=genome_data.data["assembly_name"],
    assembly_accession=genome_data.data["assembly_accession"],
    assembly_citations=[],
)

_species = stdpopsim.Species(
    id="$sps_id",
    name="FIXME",
    common_name="FIXME",
    genome=_genome,
    generation_time=0,  # FIXME
    generation_time_citations=[],
    population_size=0,  # FIXME
    population_size_citations=[],
)

stdpopsim.register_species(_species)
"""
)

species_test_template = string.Template(
    """
import stdpopsim
from tests import test_species


class TestSpecies(test_species.SpeciesTestBase):

    species = stdpopsim.get_species("$sps_id")

    # TODO specific tests for species data.

class TestGenome(test_species.GenomeTestBase):

    genome = stdpopsim.get_species("$sps_id").genome

"""
)


def black_format(code):
    return black.format_file_contents(code, fast=False, mode=black.FileMode())


def ensembl_stdpopsim_id(ensembl_id):
    tmp = ensembl_id.split("_")[:2]
    sps_id = "".join([x[0:3].capitalize() for x in tmp])
    if len(sps_id) != 6:
        raise ValueError(f"Cannot extract six character id from {ensembl_id}")
    return sps_id


def catalog_path(sps_id):
    return pathlib.Path(f"stdpopsim/catalog/{sps_id}")


def write_catalog_stub(path, sps_id, ensembl_id):
    """
    Writes stub files to the catalog for a new species.
    """
    with open(path / "__init__.py", "w") as f:
        print('"""', file=f)
        print(f"Catalog definitions for {sps_id} (Ensembl ID='{ensembl_id}')", file=f)
        print('"""', file=f)
        print("from . import species  # noqa: F401", file=f)

    species_code = species_template.substitute(sps_id=sps_id)
    path = path / "species.py"
    click.echo(f"Writing species definition stub to {path}")
    with open(path, "w") as f:
        f.write(black_format(species_code))

    test_code = species_test_template.substitute(sps_id=sps_id)
    test_path = pathlib.Path("tests") / f"test_{sps_id}.py"
    click.echo(f"Writing species test stub to {test_path}")
    with open(test_path, "w") as f:
        f.write(black_format(test_code))


class DataWriter:
    """
    Writes data obtained from upstream sources into the stdpopsim
    package hierarchy.
    """

    def __init__(self):
        self.ensembl_client = ensembl.EnsemblRestClient()

    @contextlib.contextmanager
    def write(self, path):
        with open(path, "w") as f:
            print("# File autogenerated from Ensembl REST API. Do not edit.", file=f)
            yield f

    def add_species(self, ensembl_id, force=False):
        sps_id = ensembl_stdpopsim_id(ensembl_id)
        click.echo(f"Adding new species {sps_id} for Ensembl ID {ensembl_id}")
        root = catalog_path(sps_id)
        if force:
            shutil.rmtree(root, ignore_errors=True)
        root.mkdir()
        self.write_genome_data(ensembl_id)
        write_catalog_stub(root, sps_id, ensembl_id)

    def write_genome_data(self, ensembl_id):
        sps_id = ensembl_stdpopsim_id(ensembl_id)
        path = catalog_path(sps_id)
        if not path.exists():
            raise ValueError(
                f"Directory {id} corresponding to {ensembl_id} does" + "not exist"
            )
        click.echo(f"Writing genome data for {sps_id} {ensembl_id}")
        path = path / "genome_data.py"
        data = self.ensembl_client.get_genome_data(ensembl_id)
        code = f"data = {data}"

        # Format the code with Black so we don't get noisy diffs
        with self.write(path) as f:
            f.write(black_format(code))

    def write_ensembl_release(self):
        release = self.ensembl_client.get_release()
        click.echo(f"Using Ensembl release {release}")
        path = pathlib.Path("stdpopsim/catalog/ensembl_info.py")
        code = f"release = {release}"
        with self.write(path) as f:
            f.write(black_format(code))


################
# User interface
################


@click.group()
def cli():
    pass


@cli.command()
def list_species():
    """
    List species in stdpopsim with their Ensembl IDs.
    """
    click.echo("ID       Ensembl ID")
    for species in stdpopsim.all_species():
        click.echo(f"{species.id}   {species.ensembl_id}")


@cli.command()
@click.argument("species", nargs=-1)
def update_genome_data(species):
    """
    Update the species genome data from Ensembl. Ensembl IDs for
    species can optionally be provided, e.g.

    update-genome-data homo_sapiens

    will update the genome data for humans. Multiple species can
    be specified. By default all species are updated.
    """
    if len(species) == 0:
        embl_ids = [s.ensembl_id for s in stdpopsim.all_species()]
    else:
        embl_ids = [s.lower() for s in species]
    writer = DataWriter()
    for eid in embl_ids:
        writer.write_genome_data(eid)
    writer.write_ensembl_release()


@cli.command()
@click.argument("ensembl-id")
@click.option("--force", is_flag=True)
def add_species(ensembl_id, force):
    """
    Add a new species to the catalog using its ensembl ID.
    """
    writer = DataWriter()
    writer.add_species(ensembl_id, force=force)
    writer.write_ensembl_release()


def main():
    cli()
